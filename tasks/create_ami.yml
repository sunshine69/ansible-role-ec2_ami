---
- name: set ami builder search tag dictionary
  set_fact:
  args:
    ami_builder_search_tags:
      "{{ ami_builder_search_tags|default({})|combine({item.key: item.value}) }}"
  with_dict:
    instance-state-name: running
    "tag:Environment": "{{ env|default() }}"
    "tag:Application": "{{ role_type|default() }}"
    "tag:BuildLayer": "{{ ami_build_layer }}"
    "tag:Platform": "{{ platform|default() }}"
    "tag:Builder": "True"
  when: item.value != ""

- name: Get the AMI build instance
  ec2_instance_facts:
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    filters: "{{ ami_builder_search_tags }}"
  register: ec2_sandbox

- name: set the instance fact
  set_fact:
    instance: "{{ec2_sandbox.instances[0]}}"

- name: Get human readable time
  command: date +'%Y%m%d-%H%M'
  register: timestamp
  changed_when: false

- debug:
    var: item
  with_dict:
    Environment: "{{ env|default() }}"
    Name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    Application: "{{ role_type|default() }}"
    Version: "{{ current_version|default() }}"
    DeployVersion: "{{ deploy_version|default(current_version|default()) }}"
    AmiParentImage: "{{ instance.tags.AmiParentImage }}"
    AmiParentImageName: "{{ instance.tags.AmiParentImageName }}"
    BuildLayer: "{{ ami_build_layer }}"
    Platform: "{{ platform|default() }}"
    Branch: "{{ branch|default() }}"

- name: create tags dictionary (avoids empty tags)
  set_fact:
  args:
    ami_tags:
      "{{ ami_tags|default({})|combine({item.key: item.value}) }}"
  with_dict:
    Environment: "{{ env|default() }}"
    Name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    Application: "{{ role_type|default() }}"
    Version: "{{ current_version|default() }}"
    DeployVersion: "{{ deploy_version|default(current_version|default()) }}"
    AmiParentImage: "{{ instance.tags.AmiParentImage }}"
    AmiParentImageName: "{{ instance.tags.AmiParentImageName }}"
    AmiParentVersion: "{{ instance.tags.AmiParentVersion|default() }}"
    BuildLayer: "{{ ami_build_layer }}"
    Platform: "{{ platform|default() }}"
    Branch: "{{ branch|default() }}"
  when: item.value != ""

- debug:
    var: ami_tags
    verbosity: 2

- name: Create new AMI image
  ec2_ami:
    profile: "{{ profile|default(omit) }}"
    region: "{{ region }}"
    instance_id: "{{ instance.instance_id }}"
    name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    tags: "{{ ami_tags }}"
    device_mapping: "{{ ec2_ami_volumes }}"
    wait: yes
    wait_timeout: "{{ timeout_to_wait_for_image }}"
    launch_permissions:
      user_ids: "{{ ami_sharing[aws_account_name]|default([]) }}"
  register: ami

- name: latest ami for {{ ami_build_layer }}
  debug:
    var: ami.image_id
    verbosity: 2

- name: wait for maximum wait_for_image_tobe_ready (default 90 secs) for newly ami image to be available
  pause: seconds={{ wait_for_image_tobe_ready | default(90) }}

- name: Terminating ami builder instance
  ec2:
    region: "{{region}}"
    profile: "{{ profile|default(omit) }}"
    state: absent
    instance_ids: [ "{{ instance.instance_id }}" ]
  when: keep_sandbox is not defined

- name: Remove ephemeral EC2 key
  ec2_key:
    region: "{{region}}"
    profile: "{{ profile|default(omit) }}"
    state: absent
    name: "{{ ec2_key_pair }}"
  when: generate_ephemeral_key|bool

- name: Remove ephemeral ssh key
  file:
    name: "~/.ssh/{{ item }}"
    state: absent
  with_items:
    - "{{ ec2_key_pair }}"
    - "{{ ec2_key_pair }}.pub"
  when: generate_ephemeral_key|bool
