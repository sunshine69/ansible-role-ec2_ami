---
- name: Get the sandbox instance for {{ env }}-{{ role_type }}
  ec2_remote_facts:
    region: "{{region}}"
    profile: "{{aws_account_name}}"
    filters:
      instance-state-name: running
      "tag:Name": "{{env}}-master-ami-{{ role_type }}"
      "tag:Stream": 2
      "tag:App": "{{ role_type }}"
  register: ec2_sandbox

- name: set the instance id fact
  set_fact:
    instance_id: "{{ec2_sandbox.instances[0].id}}"

- name: get the drupal version tag when we build role image
  include: "{{role_path}}/../common/lookup_drupal_version.yml"
  when: role_type == 'drupal' and base_image_version is not defined

- name: set a fact with the drupal version
  set_fact:
    current_version: "{{drupal_version | default('undefined')}}"
  when: role_type == 'drupal' and base_image_version is not defined

- name: Get epoch time
  shell: date +'%s'
  register: epoch
  changed_when: false

- name: Send notification message via Slack
  slack:
    token: "{{slack.token}}"
    msg: "Creating new {{ role_type }} ami  - Version {{current_version |default('undefined')}}"
  when: role_type == 'drupal'

- debug: msg="{{role_image_version}}"
  when: role_image_version is defined
- debug: msg="{{base_image_version}}"
  when: base_image_version is defined

- block:
    - name: Create new base AMI image for {{ role_type }}
      ec2_ami:
        profile: "{{aws_account_name}}"
        region: "{{region}}"
        instance_id: "{{instance_id}}"
        name: "s2-{{ role_type }} {{ epoch.stdout }}"
        device_mapping:
          - device_name: /dev/sda1
            size: 20
            delete_on_termination: true
            volume_type: gp2
          # - device_name: /dev/sdb
          #   size: 20
          #   delete_on_termination: false
          #   volume_type: gp2
        tags:
          Environment: "{{ env }}"
          Name: "s2-{{ role_type }}"
          App: "{{ role_type }}"
          Stream: 2
          Version: "{{ current_version | default('undefined') }}"
          base_image_version: "{{base_image_version}}"
          KeepImage: "{{ keep_image|default('no') }}"
      register: instance
    - name: Newly created base ami image_id
      debug: msg="{{instance.image_id}}"
  when: base_image_version is defined

- block:
    - name: Create new complete AMI image for {{ role_type }}
      ec2_ami:
        profile: "{{aws_account_name}}"
        region: "{{region}}"
        instance_id: "{{instance_id}}"
        name: "s2-{{ role_type }} {{ epoch.stdout }}"
        device_mapping:
          - device_name: /dev/sda1
            size: 20
            delete_on_termination: true
            volume_type: gp2
        tags:
          Environment: "{{ env }}"
          Name: "s2-{{ role_type }}"
          App: "{{ role_type }}"
          Stream: 2
          Version: "{{ current_version | default('undefined') }}"
          role_image_version: "{{role_image_version}}"
          KeepImage: "{{ keep_image|default('no') }}"
      register: instance
    - name: Newly created role ami image_id
      debug: msg="{{instance.image_id}}"
  when: role_image_version is defined

- name: find latest ami for {{ env }}
  ec2_ami_find:
    region: "{{region}}"
    profile: "{{ aws_account_name }}"
    owner: self
    ami_tags:
      Name: "s2-{{ role_type }}"
      App: "{{ role_type }}"
      Stream: 2
      Version: 'get tag from build artefact'
    sort: creationDate
    sort_order: descending
  # register: ami

# - name: latest ami for {{ role_type }}
#   debug: msg="{{ami.results[0].ami_id}}"

- name: Terminating {{ env }}-role_type sandbox instance, We keep the drupal master for int only
  ec2:
    region: "{{region}}"
    profile: "{{ aws_account_name }}"
    state: absent
    instance_ids: [ "{{instance_id}}" ]
  when: keep_sandbox is not defined and ( role_type != 'drupal' or env != 's2-int' )

- name: wait for maximum {{timeout_to_wait_for_image}} secs for newly ami image to be available
  pause: seconds={{timeout_to_wait_for_image}}

- name: Send notification message via Slack
  slack:
    token: "{{slack.token}}"
    msg: "New AMI created"
...
