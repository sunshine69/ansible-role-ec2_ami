---
- name: Get the sandbox instance for {{ env }}-{{ role_type }}
  ec2_remote_facts:
    region: "{{region}}"
    profile: "{{aws_account_name}}"
    filters:
      instance-state-name: running
      "tag:Name": "s2-master-ami-{{ role_type }}"
      "tag:Stream": 2
      "tag:App": "{{ role_type }}"
  register: ec2_sandbox

- name: set the instance id fact
  set_fact:
    instance_id: "{{ec2_sandbox.instances[0].id}}"

- name: get the drupal version tag
  uri: url="http://{{ec2_sandbox.instances[0].public_dns_name }}:7000" return_content=yes
  register: drupal_version
  when: role_type == 'drupal'

- name: set a fact with the drupal version
  set_fact:
    current_version: "{{drupal_version.json.version | default('undefined')}}"
  when: role_type == 'drupal'

- name: Get epoch time
  shell: date +'%s'
  register: epoch
  changed_when: false

- name: Send notification message via Slack
  slack:
    token: "{{slack.token}}"
    msg: "Creating new {{ role_type }} ami  - Version {{current_version |default('undefined')}}"
  when: role_type == 'drupal'

- name: Create new AMI for {{ role_type }}
  ec2_ami:
    profile: "{{aws_account_name}}"
    region: "{{region}}"
    instance_id: "{{instance_id}}"
    name: "s2-{{ role_type }} {{ epoch.stdout }}"
    device_mapping:
      - device_name: /dev/sda1
        size: 20
        delete_on_termination: true
        volume_type: gp2
      # - device_name: /dev/sdb
      #   size: 20
      #   delete_on_termination: false
      #   volume_type: gp2
    tags:
      Environment: "{{ env }}"
      Name: "s2-{{ role_type }}"
      App: "{{ role_type }}"
      Stream: 2
      Version: "{{current_version | default('undefined') }}"
  register: instance

- name: Newly created ami
  debug: msg="{{instance.image_id}}"

- name: find latest ami for {{ env }}
  ec2_ami_find:
    region: "{{region}}"
    profile: "{{ aws_account_name }}"
    owner: self
    ami_tags:
      Name: "s2-{{ role_type }}"
      App: "{{ role_type }}"
      Stream: 2
      Version: 'get tag from build artefact'
    sort: creationDate
    sort_order: descending
  # register: ami


# - name: latest ami for {{ role_type }}
#   debug: msg="{{ami.results[0].ami_id}}"

- name: Terminating {{ env }}-role_type sandbox instance
  ec2:
    state: absent
    instance_ids: "{{instance_id}}"
  when: terminate

- name: Send notification message via Slack
  slack:
    token: "{{slack.token}}"
    msg: "New AMI created"
