---
- name: set ami builder search tag dictionary
  set_fact:
  args:
    ami_builder_search_tags:
      "{{ ami_builder_search_tags|default({})|combine({item.key: item.value}) }}"
  with_dict:
    instance-state-name: running
    "tag:Environment": "{{ env|default() }}"
    "tag:App": "{{ role_type|default() }}"
    "tag:BuildLayer": "{{ ami_build_layer }}"
    "tag:Platform": "{{ platform|default() }}"
  when: item.value != ""

- name: Get the AMI build instance
  ec2_remote_facts:
    region: "{{ region }}"
    profile: "{{ aws_account_name }}"
    filters: "{{ ami_builder_search_tags }}"
  register: ec2_sandbox

- name: set the instance fact
  set_fact:
    instance: "{{ec2_sandbox.instances[0]}}"

- name: Get human readable time
  shell: date +'%Y%m%d-%H%M'
  register: timestamp
  changed_when: false

- debug:
    var: item
  with_dict:
    Environment: "{{ env|default() }}"
    Name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    App: "{{ role_type|default() }}"
    Version: "{{ current_version|default() }}"
    AmiParentImage: "{{ instance.tags.AmiParentImage }}"
    AmiParentImageName: "{{ instance.tags.AmiParentImageName }}"
    BuildLayer: "{{ ami_build_layer }}"
    Platform: "{{ platform|default() }}"

- name: create tags dictionary (avoids empty tags)
  set_fact:
  args:
    ami_tags:
      "{{ ami_tags|default({})|combine({item.key: item.value}) }}"
  with_dict:
    Environment: "{{ env|default() }}"
    Name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    App: "{{ role_type|default() }}"
    Version: "{{ current_version|default() }}"
    AmiParentImage: "{{ instance.tags.AmiParentImage }}"
    AmiParentImageName: "{{ instance.tags.AmiParentImageName }}"
    AmiParentVersion: "{{ instance.tags.AmiParentVersion|default() }}"
    BuildLayer: "{{ ami_build_layer }}"
    Platform: "{{ platform|default() }}"
  when: item.value != ""

- debug:
    var: ami_tags
    verbosity: 2

- name: Create new AMI image
  ec2_ami:
    profile: "{{ aws_account_name }}"
    region: "{{ region }}"
    instance_id: "{{ instance.id }}"
    name: "{{ ami_image_name }}-{{ timestamp.stdout }}"
    tags: "{{ ami_tags }}"
    device_mapping:
      - device_name: /dev/sda1
        size: 20
        delete_on_termination: true
        volume_type: gp2
      #   volume_type: gp2
    wait: yes
    wait_timeout: "{{ timeout_to_wait_for_image }}"
  register: ami

- name: latest ami for {{ ami_build_layer }}
  debug:
    var: ami.image_id
    verbosity: 2

- name: wait for maximum wait_for_image_tobe_ready (default 90 secs) for newly ami image to be available
  pause: seconds={{ wait_for_image_tobe_ready | default(90) }}

- name: Terminating ami builder instance
  ec2:
    region: "{{region}}"
    profile: "{{ aws_account_name }}"
    state: absent
    instance_ids: [ "{{instance.id}}" ]
  when: keep_sandbox is not defined
